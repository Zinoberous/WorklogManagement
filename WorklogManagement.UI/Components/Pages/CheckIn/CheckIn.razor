@page "/checkin"
@inherits BasePage<CheckInViewModel>

<PageTitle>Stechuhr</PageTitle>

<MenuBar>
    <RadzenButton Click="@ViewModel.OpenDialog">Erstellen</RadzenButton>
    <RadzenDatePicker @bind-Value="ViewModel.SelectedDate" Change="@ViewModel.OnSelectedDateChanged" DateFormat="dd.MM.yyyy" ShowCalendarWeek DateRender="@DateRender" />
</MenuBar>

<main class="checkin">
    <CheckInDialog
        @bind-IsOpen="ViewModel.IsDialogOpen"
        Date="@ViewModel.SelectedDate"
        OnSaveWorkTime="@ViewModel.SaveWorkTimeAsync"
        OnSaveAbsence="@ViewModel.SaveAbsenceAsync"
    />
    <AsyncContent IsLoading="@ViewModel.IsLoading">
        @if (ViewModel.WorkTimes.Count + ViewModel.Absences.Count == 0)
        {
            <RadzenRow>
                <RadzenColumn>
                    Keine Eintr√§ge vorhanden.
                </RadzenColumn>
            </RadzenRow>
        }
        @foreach (var workTime in ViewModel.WorkTimes)
        {
            <CheckInEntry SelectedType="@workTime.Type.ToString()"
                          TypeOptions="@WorkTimeLabels.Values.Concat(AbsenceLabels.Values).ToList()"
                          Actual="@(new TimeOnly(workTime.ActualMinutes / 60, workTime.ActualMinutes % 60, 0))"
                          Expected="@(new TimeOnly(workTime.ExpectedMinutes / 60, workTime.ExpectedMinutes % 60, 0))"
                          Note="@workTime.Note" />
        }
        @foreach (var absence in ViewModel.Absences)
        {
            <CheckInEntry SelectedType="@absence.Type.ToString()"
                          TypeOptions="@WorkTimeLabels.Values.Concat(AbsenceLabels.Values).ToList()"
                          Actual="@(new TimeOnly(absence.DurationMinutes / 60, absence.DurationMinutes % 60, 0))"
                          Note="@absence.Note" />
        }
    </AsyncContent>
</main>
