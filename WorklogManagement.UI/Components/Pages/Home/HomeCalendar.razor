<div class="rz-data-grid rz-datatable rz-datatable-scrollable">
    <div class="rz-data-grid-data">
        <table class="rz-grid-table rz-grid-gridlines-both">
            <thead>
                <tr>
                    <th class="rz-text-align-center">
                        <div>
                            <span class="rz-column-title">
                                <span class="rz-column-title-content" />
                            </span>
                        </div>
                    </th>
                    @for (var day = 1; day <= 31; day++)
                    {
                        <th>
                            <div>
                                <span class="rz-column-title">
                                    <span class="rz-column-title-content">
                                        @($"{day}".PadLeft(2, '0'))
                                    </span>
                                </span>
                            </div>
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @* last month of previous year *@
                <tr class="rz-data-row">
                    <td style="padding: 0; text-align: center;">
                        <span class="rz-cell-data">
                            @MonthLabelShorts[11]
                        </span>
                    </td>
                    @for (var day = 1; day <= 31; day++)
                    {
                        <td style="padding: 0;">
                            @try
                            {
                                DateOnly date = new(Year - 1, 12, day);

                                var workTimes = WorkTimes.Where(x => x.Date == date).ToArray();

                                var absences = Absences.Where(x => x.Date == date).ToArray();

                                var holiday = Holidays.FirstOrDefault(x => x.Date == date);

                                <HomeCalendarDay Date="date" WorkTimes="workTimes" Absences="absences" Holiday="holiday" />
                            }
                            catch
                            {
                                // invalid date = nothing to render
                            }
                        </td>
                    }
                </tr>
                @* current year *@
                @for (var month = 1; month <= 12; month++)
                {
                    <tr class="rz-data-row">
                        <td style="padding: 0; text-align: center;">
                            <span class="rz-cell-data">
                                @MonthLabelShorts[month - 1]
                            </span>
                        </td>
                        @for (var day = 1; day <= 31; day++)
                        {
                            <td style="padding: 0;">
                                @try
                                {
                                    DateOnly date = new(Year, month, day);

                                    var workTimes = WorkTimes.Where(x => x.Date == date).ToArray();

                                    var absences = Absences.Where(x => x.Date == date).ToArray();

                                    var holiday = Holidays.FirstOrDefault(x => x.Date == date);

                                    <HomeCalendarDay Date="date" WorkTimes="workTimes" Absences="absences" Holiday="holiday" />
                                }
                                catch
                                {
                                    // invalid date = nothing to render
                                }
                            </td>
                        }
                    </tr>
                }
                @* first month of next year *@
                <tr class="rz-data-row">
                    <td style="padding: 0; text-align: center;">
                        <span class="rz-cell-data">
                            @MonthLabelShorts[0]
                        </span>
                    </td>
                    @for (var day = 1; day <= 31; day++)
                    {
                        <td style="padding: 0;">
                            @try
                            {
                                DateOnly date = new(Year + 1, 1, day);

                                var workTimes = WorkTimes.Where(x => x.Date == date).ToArray();

                                var absences = Absences.Where(x => x.Date == date).ToArray();

                                var holiday = Holidays.FirstOrDefault(x => x.Date == date);

                                <HomeCalendarDay Date="date" WorkTimes="workTimes" Absences="absences" Holiday="holiday" />
                            }
                            catch
                            {
                                // invalid date = nothing to render
                            }
                        </td>
                    }
                </tr>
            </tbody>
        </table>
    </div>
</div>
