@page "/"
@inherits BasePage<HomeViewModel>

@using WorklogManagement.Shared.Enums
@using WorklogManagement.UI.Extensions

<PageTitle>Startseite</PageTitle>

<main class="home">
    <FlexCol>
        <FlexRow Wrap>
            <FlexFill>
                <RadzenCard>
                    <RadzenText>Überstunden:</RadzenText>
                    <AsyncContent IsLoading="@ViewModel.LoadOvertime" RenderMode="@Enums.AsyncContentRenderMode.WhileLoading">
                        <div class="overtime">
                            <div>@ViewModel.Overtime.Total.ToTimeString()</div>
                            <div>
                                @WorkTimeLabels[WorkTimeType.Office]: @ViewModel.Overtime.Office.ToTimeString() /
                                @WorkTimeLabels[WorkTimeType.Mobile]: @ViewModel.Overtime.Mobile.ToTimeString()
                            </div>
                        </div>
                    </AsyncContent>
                </RadzenCard>
            </FlexFill>
            <FlexFill>
                <RadzenCard>
                    <RadzenText>Tage:</RadzenText>
                    <AsyncContent IsLoading="@ViewModel.LoadCalendarStatistics" RenderMode="@Enums.AsyncContentRenderMode.WhileLoading">
                        <ul>
                            <li>Arbeitstage: <strong>@ViewModel.CalendarStatisticsYear[CalendarEntryType.Workday]/@ViewModel.CalendarStatisticsAll[CalendarEntryType.Workday]</strong></li>
                            <li />
                            <li>Büro: <strong>@ViewModel.CalendarStatisticsYear[CalendarEntryType.Office]/@ViewModel.CalendarStatisticsAll[CalendarEntryType.Office]</strong></li>
                            <li>Mobil: <strong>@ViewModel.CalendarStatisticsYear[CalendarEntryType.Mobile]/@ViewModel.CalendarStatisticsAll[CalendarEntryType.Mobile]</strong></li>
                            <li>Feiertage: <strong>@ViewModel.CalendarStatisticsYear[CalendarEntryType.Holiday]/@ViewModel.CalendarStatisticsAll[CalendarEntryType.Holiday]</strong></li>
                            <li>Urlaub: <strong>@ViewModel.CalendarStatisticsYear[CalendarEntryType.Vacation]/@ViewModel.CalendarStatisticsAll[CalendarEntryType.Vacation]</strong></li>
                            <li>Zeitausgleich: <strong>@ViewModel.CalendarStatisticsYear[CalendarEntryType.TimeCompensation]/@ViewModel.CalendarStatisticsAll[CalendarEntryType.TimeCompensation]</strong></li>
                            <li>Krank: <strong>@ViewModel.CalendarStatisticsYear[CalendarEntryType.Ill]/@ViewModel.CalendarStatisticsAll[CalendarEntryType.Ill]</strong></li>
                        </ul>
                    </AsyncContent>
                </RadzenCard>
            </FlexFill>
            <FlexFill>
                <RadzenCard>
                    <RadzenText>Tickets:</RadzenText>
                    <AsyncContent IsLoading="@ViewModel.LoadTicketStatistics" RenderMode="@Enums.AsyncContentRenderMode.WhileLoading">
                        <ul>
                            <li>Gesamt: <strong>@ViewModel.TicketStatistics.Sum(x => x.Value)</strong></li>
                            <li>Offen: <strong>@ViewModel.TicketStatistics[TicketStatus.Todo]</strong></li>
                            <li>In Bearbeitung: <strong>@ViewModel.TicketStatistics[TicketStatus.Running]</strong></li>
                            <li>Dauerauftrag: <strong>@ViewModel.TicketStatistics[TicketStatus.Continuous]</strong></li>
                            <li>Pausiert: <strong>@ViewModel.TicketStatistics[TicketStatus.Paused]</strong></li>
                            <li>Blockiert: <strong>@ViewModel.TicketStatistics[TicketStatus.Blocked]</strong></li>
                            <li>Erledigt: <strong>@ViewModel.TicketStatistics[TicketStatus.Done]</strong></li>
                            <li>Abgebrochen: <strong>@ViewModel.TicketStatistics[TicketStatus.Canceled]</strong></li>
                        </ul>
                    </AsyncContent>
                </RadzenCard>
            </FlexFill>
        </FlexRow>
        <FlexFill>
            <RadzenPanel>
                <FlexCol>
                    <FlexRow>
                        <YearPicker @bind-Value="ViewModel.SelectedYear" OnChanged="@ViewModel.OnSelectedYearChanged" />
                        <RadzenDropDown @bind-Value="ViewModel.SelectedFederalState" SelectedItemChanged="@ViewModel.OnSelectedFederalStateChanged" Data="@FederalStates" ValueProperty="Key" TextProperty="Value" />
                    </FlexRow>
                    <FlexFill>
                        <div style="@CalendarStyle">
                            <AsyncContent IsLoading="@ViewModel.LoadCalendar" RenderMode="@Enums.AsyncContentRenderMode.WhileLoading">
                                <RadzenDataGrid Data="@CalendarData" AllowAlternatingRows="false" GridLines="DataGridGridLines.Both">
                                    <Columns>
                                        <RadzenDataGridColumn Frozen Width="50px" CssClass="month">
                                            <Template>
                                                <div>
                                                    <div>@MonthLabelShorts[context.Month - 1]</div>
                                                    @if (context.Year != ViewModel.SelectedYear)
                                                    {
                                                        <div>@context.Year</div>
                                                    }
                                                </div>
                                            </Template>
                                        </RadzenDataGridColumn>
                                        @foreach (var day in Enumerable.Range(1, 31))
                                        {
                                            <RadzenDataGridColumn Title="@($"{day}".PadLeft(2, '0'))" Width="50px" CssClass="day">
                                                <Template>
                                                    @if (day <= DateTime.DaysInMonth(context.Year, context.Month))
                                                    {
                                                        <HomeCalendarDay
                                                            Date="@(new DateOnly(context.Year, context.Month, day))"
                                                            WorkTimes="@context.Days.ElementAt(day - 1).WorkTimes"
                                                            Absences="@context.Days.ElementAt(day - 1).Absences"
                                                            Holiday="@context.Days.ElementAt(day - 1).Holiday"
                                                        />
                                                    }
                                                </Template>
                                            </RadzenDataGridColumn>
                                        }
                                    </Columns>
                                </RadzenDataGrid>
                            </AsyncContent>
                        </div>
                    </FlexFill>
                </FlexCol>
            </RadzenPanel>
        </FlexFill>
    </FlexCol>
</main>
