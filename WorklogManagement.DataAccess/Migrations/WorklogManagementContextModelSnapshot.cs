// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorklogManagement.DataAccess.Context;

#nullable disable

namespace WorklogManagement.DataAccess.Migrations
{
    [DbContext(typeof(WorklogManagementContext))]
    partial class WorklogManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("WorklogManagement.DataAccess.Models.CalendarEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CalendarEntryTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CalendarEntryTypeId");

                    b.HasIndex(new[] { "Date", "CalendarEntryTypeId" }, "UX_Day_Date_CalendarEntryTypeId")
                        .IsUnique();

                    b.ToTable("CalendarEntry");
                });

            modelBuilder.Entity("WorklogManagement.DataAccess.Models.CalendarEntryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UX_CalendarEntryType_Name")
                        .IsUnique();

                    b.ToTable("CalendarEntryType");
                });

            modelBuilder.Entity("WorklogManagement.DataAccess.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RefId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TicketStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RefId");

                    b.HasIndex("TicketStatusId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("WorklogManagement.DataAccess.Models.TicketAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("TicketId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TicketId", "Name" }, "UX_TicketAttachment_TicketId_Name")
                        .IsUnique();

                    b.ToTable("TicketAttachment");
                });

            modelBuilder.Entity("WorklogManagement.DataAccess.Models.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UX_TicketStatus_Name")
                        .IsUnique();

                    b.ToTable("TicketStatus");
                });

            modelBuilder.Entity("WorklogManagement.DataAccess.Models.TicketStatusLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("TicketId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TicketStatusId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("TicketStatusId");

                    b.ToTable("TicketStatusLog");
                });

            modelBuilder.Entity("WorklogManagement.DataAccess.Models.Worklog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("TicketId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("TimeSpent")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Worklog");
                });

            modelBuilder.Entity("WorklogManagement.DataAccess.Models.WorklogAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("WorklogId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "WorklogId", "Name" }, "UX_WorklogAttachment_WorklogId_Name")
                        .IsUnique();

                    b.ToTable("WorklogAttachment");
                });

            modelBuilder.Entity("WorklogManagement.DataAccess.Models.CalendarEntry", b =>
                {
                    b.HasOne("WorklogManagement.DataAccess.Models.CalendarEntryType", "CalendarEntryType")
                        .WithMany("CalendarEntries")
                        .HasForeignKey("CalendarEntryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UX_Day_Date_CalendarEntryType_CalendarEntryTypeId");

                    b.Navigation("CalendarEntryType");
                });

            modelBuilder.Entity("WorklogManagement.DataAccess.Models.Ticket", b =>
                {
                    b.HasOne("WorklogManagement.DataAccess.Models.Ticket", "Ref")
                        .WithMany("InverseRef")
                        .HasForeignKey("RefId")
                        .HasConstraintName("FK_Ticket_RefId_Ticket_Id");

                    b.HasOne("WorklogManagement.DataAccess.Models.TicketStatus", "TicketStatus")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_TicketStatusId_TicketStatus_Id");

                    b.Navigation("Ref");

                    b.Navigation("TicketStatus");
                });

            modelBuilder.Entity("WorklogManagement.DataAccess.Models.TicketAttachment", b =>
                {
                    b.HasOne("WorklogManagement.DataAccess.Models.Ticket", "Ticket")
                        .WithMany("TicketAttachments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TicketAttachment_TicketId_Ticket_Id");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("WorklogManagement.DataAccess.Models.TicketStatusLog", b =>
                {
                    b.HasOne("WorklogManagement.DataAccess.Models.Ticket", "Ticket")
                        .WithMany("TicketStatusLogs")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TicketStatusLog_TicketId_Ticket_Id");

                    b.HasOne("WorklogManagement.DataAccess.Models.TicketStatus", "TicketStatus")
                        .WithMany("TicketStatusLogs")
                        .HasForeignKey("TicketStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TicketStatusLog_TicketStatusId_TicketStatus_Id");

                    b.Navigation("Ticket");

                    b.Navigation("TicketStatus");
                });

            modelBuilder.Entity("WorklogManagement.DataAccess.Models.Worklog", b =>
                {
                    b.HasOne("WorklogManagement.DataAccess.Models.Ticket", "Ticket")
                        .WithMany("Worklogs")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Worklog_TicketId_Ticket_Id");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("WorklogManagement.DataAccess.Models.WorklogAttachment", b =>
                {
                    b.HasOne("WorklogManagement.DataAccess.Models.Worklog", "Worklog")
                        .WithMany("WorklogAttachments")
                        .HasForeignKey("WorklogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_WorklogAttachment_WorklogId_Worklog_Id");

                    b.Navigation("Worklog");
                });

            modelBuilder.Entity("WorklogManagement.DataAccess.Models.CalendarEntryType", b =>
                {
                    b.Navigation("CalendarEntries");
                });

            modelBuilder.Entity("WorklogManagement.DataAccess.Models.Ticket", b =>
                {
                    b.Navigation("InverseRef");

                    b.Navigation("TicketAttachments");

                    b.Navigation("TicketStatusLogs");

                    b.Navigation("Worklogs");
                });

            modelBuilder.Entity("WorklogManagement.DataAccess.Models.TicketStatus", b =>
                {
                    b.Navigation("TicketStatusLogs");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("WorklogManagement.DataAccess.Models.Worklog", b =>
                {
                    b.Navigation("WorklogAttachments");
                });
#pragma warning restore 612, 618
        }
    }
}
